<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: gtfs-realtime.proto

namespace Transit_realtime;

use Google\Protobuf\Internal\GPBUtil;

/**
 * Realtime positioning information for a given vehicle.
 *
 * Generated from protobuf message <code>transit_realtime.VehiclePosition</code>
 */
class VehiclePosition extends \Google\Protobuf\Internal\Message
{
    /**
     * The Trip that this vehicle is serving.
     * Can be empty or partial if the vehicle can not be identified with a given
     * trip instance.
     *
     * Generated from protobuf field <code>optional .transit_realtime.TripDescriptor trip = 1;</code>
     */
    protected $trip = null;
    /**
     * Additional information on the vehicle that is serving this trip.
     *
     * Generated from protobuf field <code>optional .transit_realtime.VehicleDescriptor vehicle = 8;</code>
     */
    protected $vehicle = null;
    /**
     * Current position of this vehicle.
     *
     * Generated from protobuf field <code>optional .transit_realtime.Position position = 2;</code>
     */
    protected $position = null;
    /**
     * The stop sequence index of the current stop. The meaning of
     * current_stop_sequence (i.e., the stop that it refers to) is determined by
     * current_status.
     * If current_status is missing IN_TRANSIT_TO is assumed.
     *
     * Generated from protobuf field <code>optional uint32 current_stop_sequence = 3;</code>
     */
    protected $current_stop_sequence = null;
    /**
     * Identifies the current stop. The value must be the same as in stops.txt in
     * the corresponding GTFS feed.
     *
     * Generated from protobuf field <code>optional string stop_id = 7;</code>
     */
    protected $stop_id = null;
    /**
     * The exact status of the vehicle with respect to the current stop.
     * Ignored if current_stop_sequence is missing.
     *
     * Generated from protobuf field <code>optional .transit_realtime.VehiclePosition.VehicleStopStatus current_status = 4;</code>
     */
    protected $current_status = null;
    /**
     * Moment at which the vehicle's position was measured. In POSIX time
     * (i.e., number of seconds since January 1st 1970 00:00:00 UTC).
     *
     * Generated from protobuf field <code>optional uint64 timestamp = 5;</code>
     */
    protected $timestamp = null;
    /**
     * Generated from protobuf field <code>optional .transit_realtime.VehiclePosition.CongestionLevel congestion_level = 6;</code>
     */
    protected $congestion_level = null;
    /**
     * Generated from protobuf field <code>optional .transit_realtime.VehiclePosition.OccupancyStatus occupancy_status = 9;</code>
     */
    protected $occupancy_status = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Transit_realtime\TripDescriptor $trip
     *           The Trip that this vehicle is serving.
     *           Can be empty or partial if the vehicle can not be identified with a given
     *           trip instance.
     *     @type \Transit_realtime\VehicleDescriptor $vehicle
     *           Additional information on the vehicle that is serving this trip.
     *     @type \Transit_realtime\Position $position
     *           Current position of this vehicle.
     *     @type int $current_stop_sequence
     *           The stop sequence index of the current stop. The meaning of
     *           current_stop_sequence (i.e., the stop that it refers to) is determined by
     *           current_status.
     *           If current_status is missing IN_TRANSIT_TO is assumed.
     *     @type string $stop_id
     *           Identifies the current stop. The value must be the same as in stops.txt in
     *           the corresponding GTFS feed.
     *     @type int $current_status
     *           The exact status of the vehicle with respect to the current stop.
     *           Ignored if current_stop_sequence is missing.
     *     @type int|string $timestamp
     *           Moment at which the vehicle's position was measured. In POSIX time
     *           (i.e., number of seconds since January 1st 1970 00:00:00 UTC).
     *     @type int $congestion_level
     *     @type int $occupancy_status
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\GtfsRealtime::initOnce();
        parent::__construct($data);
    }

    /**
     * The Trip that this vehicle is serving.
     * Can be empty or partial if the vehicle can not be identified with a given
     * trip instance.
     *
     * Generated from protobuf field <code>optional .transit_realtime.TripDescriptor trip = 1;</code>
     * @return \Transit_realtime\TripDescriptor|null
     */
    public function getTrip()
    {
        return $this->trip;
    }

    public function hasTrip()
    {
        return isset($this->trip);
    }

    public function clearTrip()
    {
        unset($this->trip);
    }

    /**
     * The Trip that this vehicle is serving.
     * Can be empty or partial if the vehicle can not be identified with a given
     * trip instance.
     *
     * Generated from protobuf field <code>optional .transit_realtime.TripDescriptor trip = 1;</code>
     * @param \Transit_realtime\TripDescriptor $var
     * @return $this
     */
    public function setTrip($var)
    {
        GPBUtil::checkMessage($var, \Transit_realtime\TripDescriptor::class);
        $this->trip = $var;

        return $this;
    }

    /**
     * Additional information on the vehicle that is serving this trip.
     *
     * Generated from protobuf field <code>optional .transit_realtime.VehicleDescriptor vehicle = 8;</code>
     * @return \Transit_realtime\VehicleDescriptor|null
     */
    public function getVehicle()
    {
        return $this->vehicle;
    }

    public function hasVehicle()
    {
        return isset($this->vehicle);
    }

    public function clearVehicle()
    {
        unset($this->vehicle);
    }

    /**
     * Additional information on the vehicle that is serving this trip.
     *
     * Generated from protobuf field <code>optional .transit_realtime.VehicleDescriptor vehicle = 8;</code>
     * @param \Transit_realtime\VehicleDescriptor $var
     * @return $this
     */
    public function setVehicle($var)
    {
        GPBUtil::checkMessage($var, \Transit_realtime\VehicleDescriptor::class);
        $this->vehicle = $var;

        return $this;
    }

    /**
     * Current position of this vehicle.
     *
     * Generated from protobuf field <code>optional .transit_realtime.Position position = 2;</code>
     * @return \Transit_realtime\Position|null
     */
    public function getPosition()
    {
        return $this->position;
    }

    public function hasPosition()
    {
        return isset($this->position);
    }

    public function clearPosition()
    {
        unset($this->position);
    }

    /**
     * Current position of this vehicle.
     *
     * Generated from protobuf field <code>optional .transit_realtime.Position position = 2;</code>
     * @param \Transit_realtime\Position $var
     * @return $this
     */
    public function setPosition($var)
    {
        GPBUtil::checkMessage($var, \Transit_realtime\Position::class);
        $this->position = $var;

        return $this;
    }

    /**
     * The stop sequence index of the current stop. The meaning of
     * current_stop_sequence (i.e., the stop that it refers to) is determined by
     * current_status.
     * If current_status is missing IN_TRANSIT_TO is assumed.
     *
     * Generated from protobuf field <code>optional uint32 current_stop_sequence = 3;</code>
     * @return int
     */
    public function getCurrentStopSequence()
    {
        return isset($this->current_stop_sequence) ? $this->current_stop_sequence : 0;
    }

    public function hasCurrentStopSequence()
    {
        return isset($this->current_stop_sequence);
    }

    public function clearCurrentStopSequence()
    {
        unset($this->current_stop_sequence);
    }

    /**
     * The stop sequence index of the current stop. The meaning of
     * current_stop_sequence (i.e., the stop that it refers to) is determined by
     * current_status.
     * If current_status is missing IN_TRANSIT_TO is assumed.
     *
     * Generated from protobuf field <code>optional uint32 current_stop_sequence = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setCurrentStopSequence($var)
    {
        GPBUtil::checkUint32($var);
        $this->current_stop_sequence = $var;

        return $this;
    }

    /**
     * Identifies the current stop. The value must be the same as in stops.txt in
     * the corresponding GTFS feed.
     *
     * Generated from protobuf field <code>optional string stop_id = 7;</code>
     * @return string
     */
    public function getStopId()
    {
        return isset($this->stop_id) ? $this->stop_id : '';
    }

    public function hasStopId()
    {
        return isset($this->stop_id);
    }

    public function clearStopId()
    {
        unset($this->stop_id);
    }

    /**
     * Identifies the current stop. The value must be the same as in stops.txt in
     * the corresponding GTFS feed.
     *
     * Generated from protobuf field <code>optional string stop_id = 7;</code>
     * @param string $var
     * @return $this
     */
    public function setStopId($var)
    {
        GPBUtil::checkString($var, True);
        $this->stop_id = $var;

        return $this;
    }

    /**
     * The exact status of the vehicle with respect to the current stop.
     * Ignored if current_stop_sequence is missing.
     *
     * Generated from protobuf field <code>optional .transit_realtime.VehiclePosition.VehicleStopStatus current_status = 4;</code>
     * @return int
     */
    public function getCurrentStatus()
    {
        return isset($this->current_status) ? $this->current_status : 0;
    }

    public function hasCurrentStatus()
    {
        return isset($this->current_status);
    }

    public function clearCurrentStatus()
    {
        unset($this->current_status);
    }

    /**
     * The exact status of the vehicle with respect to the current stop.
     * Ignored if current_stop_sequence is missing.
     *
     * Generated from protobuf field <code>optional .transit_realtime.VehiclePosition.VehicleStopStatus current_status = 4;</code>
     * @param int $var
     * @return $this
     */
    public function setCurrentStatus($var)
    {
        GPBUtil::checkEnum($var, \Transit_realtime\VehiclePosition\VehicleStopStatus::class);
        $this->current_status = $var;

        return $this;
    }

    /**
     * Moment at which the vehicle's position was measured. In POSIX time
     * (i.e., number of seconds since January 1st 1970 00:00:00 UTC).
     *
     * Generated from protobuf field <code>optional uint64 timestamp = 5;</code>
     * @return int|string
     */
    public function getTimestamp()
    {
        return isset($this->timestamp) ? $this->timestamp : 0;
    }

    public function hasTimestamp()
    {
        return isset($this->timestamp);
    }

    public function clearTimestamp()
    {
        unset($this->timestamp);
    }

    /**
     * Moment at which the vehicle's position was measured. In POSIX time
     * (i.e., number of seconds since January 1st 1970 00:00:00 UTC).
     *
     * Generated from protobuf field <code>optional uint64 timestamp = 5;</code>
     * @param int|string $var
     * @return $this
     */
    public function setTimestamp($var)
    {
        GPBUtil::checkUint64($var);
        $this->timestamp = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>optional .transit_realtime.VehiclePosition.CongestionLevel congestion_level = 6;</code>
     * @return int
     */
    public function getCongestionLevel()
    {
        return isset($this->congestion_level) ? $this->congestion_level : 0;
    }

    public function hasCongestionLevel()
    {
        return isset($this->congestion_level);
    }

    public function clearCongestionLevel()
    {
        unset($this->congestion_level);
    }

    /**
     * Generated from protobuf field <code>optional .transit_realtime.VehiclePosition.CongestionLevel congestion_level = 6;</code>
     * @param int $var
     * @return $this
     */
    public function setCongestionLevel($var)
    {
        GPBUtil::checkEnum($var, \Transit_realtime\VehiclePosition\CongestionLevel::class);
        $this->congestion_level = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>optional .transit_realtime.VehiclePosition.OccupancyStatus occupancy_status = 9;</code>
     * @return int
     */
    public function getOccupancyStatus()
    {
        return isset($this->occupancy_status) ? $this->occupancy_status : 0;
    }

    public function hasOccupancyStatus()
    {
        return isset($this->occupancy_status);
    }

    public function clearOccupancyStatus()
    {
        unset($this->occupancy_status);
    }

    /**
     * Generated from protobuf field <code>optional .transit_realtime.VehiclePosition.OccupancyStatus occupancy_status = 9;</code>
     * @param int $var
     * @return $this
     */
    public function setOccupancyStatus($var)
    {
        GPBUtil::checkEnum($var, \Transit_realtime\VehiclePosition\OccupancyStatus::class);
        $this->occupancy_status = $var;

        return $this;
    }

}

